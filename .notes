disk sectors:

0: bootsector
1-8: kernel
9: settings & sector list (tells us stuff like if it is free)
A...: file system



FS:
just under 64kb, 127 sectors (512 bytes/sector)
10 reserved sectors, 117 left for FS

folders can hold up to 31 sub directories or files (first one for parent folder)
each entry is 16 bytes:
    first byte for sector number
    other 15 for file name
flags can be looked up in osinfo sector


boot seqence:
    display loading message
    clear screen & set vga mode
    load other sectors of bootloader/kernel
    display welcome message
    start terminal




sysinfo sector:
512 bytes

bytes 0-5: 

bytes 6-126: fs info
    bits:
        0: is used
        1: is executable
        2: is protected ( all system files are protected, reads/writes require password )
        3: folder entries #
        4: folder entries #
        5: folder entries #
        6: folder entries #
        7: folder entries #
    the file is a folder if the number of entries > 0
    to separate the num of entries, use 'and (REG), 0b00011111'

bytes 127-511:








RAM ALLOCATIONS:
usable memory:
0x0500 - 0x7BFF (30464 bytes / 29.75kib): kernel memory
    0x0500 - 0x050F ( 16 bytes): info on working directory 
        0x500 sector #
        0x501 # of entries
        0x502 is protected?
        ... lots of room for new flags to save
        
    0x0510 - 0x051F ( 16 bytes): name of current directory (names are 15 bytes but null at the end ensures puts doesnt break)
    0x0520 - 0x05FF (224 bytes): command buffer (user input)
    0x0600 - 0x7BFF (30208 bytes): idk



0x7C00 - 0x179FF (65024 bytes / 63.5kib): disk
    0x7C00 - 0x7DFF  (  512 bytes  /    1 sectors): bootsector
    0x7E00 - 0x8DFF  ( 4096 bytes  /    8 sectors): kernel
    0x8E00 - 0x8FFF  (  512 bytes  /    1 sectors): osinfo
    0x9000 - 0x179FF (59904 bytes  /  117 sectors): file system



0x17A00 - 0x7FFFF (427520 bytes / 417.5kib):






to get a hexdump:
xxd -pe build/os.bin
